/*=====CORE STYLES=====*/

.toggle {
    --uiToggleSize: var(--toggleSize, 1.25rem);
    --uiToggleBorderWidth: var(--toggleBorderWidth, 2px);
    --uiToggleColor: var(--toggleColor, #222);
    display: var(--toggleDisplay, inline-flex);
    position: relative;
}

.toggle__input {
    /*
    The pattern by Sara Soueidan https://www.sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/
  */
    width: var(--uiToggleSize);
    height: var(--uiToggleSize);
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
    margin: 0;
}


/*
 1. Calculation of the gap for the custom checkbox
*/

.toggle__label {
    display: inline-flex;
    min-height: var(--uiToggleSize);
    padding-left: calc(var(--uiToggleSize) + var(--toggleIndent, .4em));
}

.toggle__input:not(:disabled)~.toggle__label {
    cursor: pointer;
}


/*
1. Ems helps to calculate size of the checkbox
*/

.toggle__label::before,
.toggle__label::after {
    content: "";
    box-sizing: border-box;
    width: 1em;
    height: 1em;
    font-size: var(--uiToggleSize);
    /* 1 */
    position: absolute;
    left: 0;
    top: 0;
}

.toggle__label::before {
    border: var(--uiToggleBorderWidth) solid var(--border-color);
    z-index: 2;
}

.toggle__input:not(:disabled)~.toggle__label::after {
    background: var(--uiToggleColor);
    opacity: 0;
}

.toggle__input:not(:disabled):checked~.toggle__label::after {
    opacity: 1;
}

.toggle__text {
    margin-top: auto;
    margin-bottom: auto;
}


/*
The arrow size and position depends from sizes of square because I needed an arrow correct positioning from the top left corner of the element toggle

1. Ems helps to calculate size and position of the arrow
*/

.toggle__input:not(:disabled)~.toggle__label .toggle__text::before {
    content: "";
    width: 0;
    height: 0;
    font-size: var(--uiToggleSize);
    /* 1 */
    border-left-width: 0;
    border-bottom-width: 0;
    border-left-style: solid;
    border-bottom-style: solid;
    border-color: var(--toggleArrowColor, #fff);
    position: absolute;
    top: .5428em;
    left: .25em;
    z-index: 3;
    transform-origin: left top;
    transform: rotate(-40deg) skew(10deg);
}

.toggle__input:not(:disabled):checked~.toggle__label .toggle__text::before {
    --uiToggleArrowWidth: var(--toggleArrowWidth, 2px);
    width: .4em;
    height: .2em;
    border-left-width: var(--uiToggleArrowWidth);
    border-bottom-width: var(--uiToggleArrowWidth);
}


/*
States
*/


/* focus state */

// .toggle:focus-within {
//     outline: var(--toggleOutlineWidthFocus, 3px) solid var(--toggleOutlineColorFocus, currentColor);
//     outline-offset: var(--toggleOutlineOffsetFocus, 5px);
// }

/* disabled state */

.toggle__input:disabled~.toggle__label {
    opacity: var(--toggleOpacityDisabled, .24);
    cursor: var(--toggleCursorDisabled, not-allowed);
}


/*
=====
PRESENTATION STYLES
=====
*/


/* 
The demo skin
*/

.toggle__text {
    color: #B7B7B7;
}

.toggle__label::before,
.toggle__label::after {
    border-radius: var(--toggleBorderRadius, 0px);
}


/* 
The animation of switching states
*/

.toggle__input:not(:disabled)~.toggle__label::before,
.toggle__input:not(:disabled)~.toggle__label::after {
    opacity: 1;
    transform-origin: center center;
    will-change: transform;
    transition: transform .2s ease-out;
}

.toggle__input:not(:disabled)~.toggle__label::before {
    transform: rotateY(0deg);
    transition-delay: .2s;
}

.toggle__input:not(:disabled)~.toggle__label::after {
    transform: rotateY(90deg);
}

.toggle__input:not(:disabled):checked~.toggle__label::before {
    transform: rotateY(-90deg);
    transition-delay: 0s;
}

.toggle__input:not(:disabled):checked~.toggle__label::after {
    transform: rotateY(0deg);
    transition-delay: .2s;
}

.toggle__text::before {
    opacity: 0;
}

.toggle__input:not(:disabled):checked~.toggle__label .toggle__text::before {
    opacity: 1;
    transition: opacity .1s ease-out .3s, width .1s ease-out .5s, height .2s ease-out .3s;
}


/*
=====
SETTINGS
=====
*/

.toggle {
    --border-color: #FAA6A6;
    --toggleColor: linear-gradient(267.71deg, #FAA6A6 0%, #F8CEBC 100%);
    --toggleBackgroundColor: linear-gradient(267.71deg, #FAA6A6 0%, #F8CEBC 100%);
    --toggleSize: 16px;
}